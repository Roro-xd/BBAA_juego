using UnityEngine;
using UnityEngine.UI;
using System.Collections.Generic;

public class MiniMapManager : MonoBehaviour
{
    public static MiniMapManager Instance;

    [Header("Configuración")]
    public Transform player;              // Transform del jugador
    public GameObject roomIconPrefab;     // Prefab del icono de habitación (UI Image)
    public GameObject playerIconPrefab;   // Prefab del icono del jugador (UI Image)
    public Color visitedRoomColor = Color.gray;
    public Color currentRoomColor = Color.white;
    public Color bossRoomColor = Color.red;

    private Dictionary<Vector2Int, Image> rooms = new Dictionary<Vector2Int, Image>();
    private Image playerIcon;
    private Vector2Int currentRoomGridPos;

    void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
            DontDestroyOnLoad(gameObject);
        }
        else
        {
            Destroy(gameObject);
        }
    }

    void Start()
    {
        // Crear icono del jugador
        playerIcon = Instantiate(playerIconPrefab, transform).GetComponent<Image>();
    }

    // Llamar cuando el jugador entra a una nueva habitación
    public void UpdatePlayerPosition(Vector2Int gridPosition, RoomType roomType)
    {
        currentRoomGridPos = gridPosition;

        // Actualizar colores
        foreach (var room in rooms)
        {
            room.Value.color = (room.Key == gridPosition) ? currentRoomColor : visitedRoomColor;
        }

        // Añadir nueva habitación al mapa si no existe
        if (!rooms.ContainsKey(gridPosition))
        {
            GameObject newRoomIcon = Instantiate(roomIconPrefab, transform);
            Image iconImage = newRoomIcon.GetComponent<Image>();
            iconImage.color = (roomType == RoomType.Boss) ? bossRoomColor : visitedRoomColor;
            rooms.Add(gridPosition, iconImage);

            // Posicionar el icono (ajusta el multiplicador según tu grid)
            newRoomIcon.transform.localPosition = new Vector3(gridPosition.x * 50, gridPosition.y * 50, 0);
        }

        // Mover icono del jugador
        playerIcon.transform.localPosition = new Vector3(gridPosition.x * 50, gridPosition.y * 50, 0);
    }
}

public enum RoomType { Normal, Boss, Shop }